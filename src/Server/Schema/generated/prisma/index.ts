// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cardData: (where?: CardDataWhereInput) => Promise<boolean>;
  commentData: (where?: CommentDataWhereInput) => Promise<boolean>;
  likeData: (where?: LikeDataWhereInput) => Promise<boolean>;
  notificaitonDescription: (
    where?: NotificaitonDescriptionWhereInput
  ) => Promise<boolean>;
  notificationData: (where?: NotificationDataWhereInput) => Promise<boolean>;
  pictureData: (where?: PictureDataWhereInput) => Promise<boolean>;
  storyData: (where?: StoryDataWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  cardData: (where: CardDataWhereUniqueInput) => CardData;
  cardDatas: (
    args?: {
      where?: CardDataWhereInput;
      orderBy?: CardDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CardDataNode>>;
  cardDatasConnection: (
    args?: {
      where?: CardDataWhereInput;
      orderBy?: CardDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CardDataConnection;
  commentDatas: (
    args?: {
      where?: CommentDataWhereInput;
      orderBy?: CommentDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CommentDataNode>>;
  commentDatasConnection: (
    args?: {
      where?: CommentDataWhereInput;
      orderBy?: CommentDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentDataConnection;
  likeDatas: (
    args?: {
      where?: LikeDataWhereInput;
      orderBy?: LikeDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LikeDataNode>>;
  likeDatasConnection: (
    args?: {
      where?: LikeDataWhereInput;
      orderBy?: LikeDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LikeDataConnection;
  notificaitonDescriptions: (
    args?: {
      where?: NotificaitonDescriptionWhereInput;
      orderBy?: NotificaitonDescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<NotificaitonDescriptionNode>>;
  notificaitonDescriptionsConnection: (
    args?: {
      where?: NotificaitonDescriptionWhereInput;
      orderBy?: NotificaitonDescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NotificaitonDescriptionConnection;
  notificationData: (
    where: NotificationDataWhereUniqueInput
  ) => NotificationData;
  notificationDatas: (
    args?: {
      where?: NotificationDataWhereInput;
      orderBy?: NotificationDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<NotificationDataNode>>;
  notificationDatasConnection: (
    args?: {
      where?: NotificationDataWhereInput;
      orderBy?: NotificationDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NotificationDataConnection;
  pictureData: (where: PictureDataWhereUniqueInput) => PictureData;
  pictureDatas: (
    args?: {
      where?: PictureDataWhereInput;
      orderBy?: PictureDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<PictureDataNode>>;
  pictureDatasConnection: (
    args?: {
      where?: PictureDataWhereInput;
      orderBy?: PictureDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PictureDataConnection;
  storyData: (where: StoryDataWhereUniqueInput) => StoryData;
  storyDatas: (
    args?: {
      where?: StoryDataWhereInput;
      orderBy?: StoryDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<StoryDataNode>>;
  storyDatasConnection: (
    args?: {
      where?: StoryDataWhereInput;
      orderBy?: StoryDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StoryDataConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCardData: (data: CardDataCreateInput) => CardData;
  updateCardData: (
    args: { data: CardDataUpdateInput; where: CardDataWhereUniqueInput }
  ) => CardData;
  updateManyCardDatas: (
    args: { data: CardDataUpdateInput; where?: CardDataWhereInput }
  ) => BatchPayload;
  upsertCardData: (
    args: {
      where: CardDataWhereUniqueInput;
      create: CardDataCreateInput;
      update: CardDataUpdateInput;
    }
  ) => CardData;
  deleteCardData: (where: CardDataWhereUniqueInput) => CardData;
  deleteManyCardDatas: (where?: CardDataWhereInput) => BatchPayload;
  createCommentData: (data: CommentDataCreateInput) => CommentData;
  updateManyCommentDatas: (
    args: { data: CommentDataUpdateInput; where?: CommentDataWhereInput }
  ) => BatchPayload;
  deleteManyCommentDatas: (where?: CommentDataWhereInput) => BatchPayload;
  createLikeData: (data: LikeDataCreateInput) => LikeData;
  updateManyLikeDatas: (
    args: { data: LikeDataUpdateInput; where?: LikeDataWhereInput }
  ) => BatchPayload;
  deleteManyLikeDatas: (where?: LikeDataWhereInput) => BatchPayload;
  createNotificaitonDescription: (
    data: NotificaitonDescriptionCreateInput
  ) => NotificaitonDescription;
  updateManyNotificaitonDescriptions: (
    args: {
      data: NotificaitonDescriptionUpdateInput;
      where?: NotificaitonDescriptionWhereInput;
    }
  ) => BatchPayload;
  deleteManyNotificaitonDescriptions: (
    where?: NotificaitonDescriptionWhereInput
  ) => BatchPayload;
  createNotificationData: (
    data: NotificationDataCreateInput
  ) => NotificationData;
  updateNotificationData: (
    args: {
      data: NotificationDataUpdateInput;
      where: NotificationDataWhereUniqueInput;
    }
  ) => NotificationData;
  updateManyNotificationDatas: (
    args: {
      data: NotificationDataUpdateInput;
      where?: NotificationDataWhereInput;
    }
  ) => BatchPayload;
  upsertNotificationData: (
    args: {
      where: NotificationDataWhereUniqueInput;
      create: NotificationDataCreateInput;
      update: NotificationDataUpdateInput;
    }
  ) => NotificationData;
  deleteNotificationData: (
    where: NotificationDataWhereUniqueInput
  ) => NotificationData;
  deleteManyNotificationDatas: (
    where?: NotificationDataWhereInput
  ) => BatchPayload;
  createPictureData: (data: PictureDataCreateInput) => PictureData;
  updatePictureData: (
    args: { data: PictureDataUpdateInput; where: PictureDataWhereUniqueInput }
  ) => PictureData;
  updateManyPictureDatas: (
    args: { data: PictureDataUpdateInput; where?: PictureDataWhereInput }
  ) => BatchPayload;
  upsertPictureData: (
    args: {
      where: PictureDataWhereUniqueInput;
      create: PictureDataCreateInput;
      update: PictureDataUpdateInput;
    }
  ) => PictureData;
  deletePictureData: (where: PictureDataWhereUniqueInput) => PictureData;
  deleteManyPictureDatas: (where?: PictureDataWhereInput) => BatchPayload;
  createStoryData: (data: StoryDataCreateInput) => StoryData;
  updateStoryData: (
    args: { data: StoryDataUpdateInput; where: StoryDataWhereUniqueInput }
  ) => StoryData;
  updateManyStoryDatas: (
    args: { data: StoryDataUpdateInput; where?: StoryDataWhereInput }
  ) => BatchPayload;
  upsertStoryData: (
    args: {
      where: StoryDataWhereUniqueInput;
      create: StoryDataCreateInput;
      update: StoryDataUpdateInput;
    }
  ) => StoryData;
  deleteStoryData: (where: StoryDataWhereUniqueInput) => StoryData;
  deleteManyStoryDatas: (where?: StoryDataWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cardData: (
    where?: CardDataSubscriptionWhereInput
  ) => CardDataSubscriptionPayloadSubscription;
  commentData: (
    where?: CommentDataSubscriptionWhereInput
  ) => CommentDataSubscriptionPayloadSubscription;
  likeData: (
    where?: LikeDataSubscriptionWhereInput
  ) => LikeDataSubscriptionPayloadSubscription;
  notificaitonDescription: (
    where?: NotificaitonDescriptionSubscriptionWhereInput
  ) => NotificaitonDescriptionSubscriptionPayloadSubscription;
  notificationData: (
    where?: NotificationDataSubscriptionWhereInput
  ) => NotificationDataSubscriptionPayloadSubscription;
  pictureData: (
    where?: PictureDataSubscriptionWhereInput
  ) => PictureDataSubscriptionPayloadSubscription;
  storyData: (
    where?: StoryDataSubscriptionWhereInput
  ) => StoryDataSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CardDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Name_ASC"
  | "Name_DESC"
  | "ThumbURL_ASC"
  | "ThumbURL_DESC"
  | "TotalLike_ASC"
  | "TotalLike_DESC"
  | "TotalComments_ASC"
  | "TotalComments_DESC"
  | "FeedDesc_ASC"
  | "FeedDesc_DESC"
  | "TimeData_ASC"
  | "TimeData_DESC"
  | "Location_ASC"
  | "Location_DESC"
  | "PictureForFeed_ASC"
  | "PictureForFeed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeDataOrderByInput =
  | "ProfileName_ASC"
  | "ProfileName_DESC"
  | "ProfilePic_ASC"
  | "ProfilePic_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type NotificaitonDescriptionOrderByInput =
  | "ProfileName_ASC"
  | "ProfileName_DESC"
  | "ProfilePicture_ASC"
  | "ProfilePicture_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentDataOrderByInput =
  | "Comment_ASC"
  | "Comment_DESC"
  | "CommentTime_ASC"
  | "CommentTime_DESC"
  | "ProfileWhichCommented_ASC"
  | "ProfileWhichCommented_DESC"
  | "Replies_ASC"
  | "Replies_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "NotificaitonCategory_ASC"
  | "NotificaitonCategory_DESC"
  | "Picture_ASC"
  | "Picture_DESC"
  | "Time_ASC"
  | "Time_DESC"
  | "Date_ASC"
  | "Date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PictureDataOrderByInput =
  | "picture_ASC"
  | "picture_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StoryDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nameOfTheStoryProvider_ASC"
  | "nameOfTheStoryProvider_DESC"
  | "time_ASC"
  | "time_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "Followers_ASC"
  | "Followers_DESC"
  | "Following_ASC"
  | "Following_DESC"
  | "Links_ASC"
  | "Links_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CardDataCreateInput {
  Name: String;
  ThumbURL: String;
  TotalLike?: Int;
  TotalComments?: Int;
  FeedDesc: String;
  AllComments?: CommentDataCreateManyInput;
  AllLikes?: LikeDataCreateManyInput;
  TimeData: DateTimeInput;
  Location: String;
  PictureForFeed: String;
}

export interface NotificationDataUpdateInput {
  ArrayOfNotificaitons?: NotificaitonDescriptionUpdateOneInput;
  NotificaitonCategory?: String;
  Picture?: String;
  Time?: DateTimeInput;
  Date?: DateTimeInput;
}

export type CardDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PictureDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CardDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  Name?: String;
  Name_not?: String;
  Name_in?: String[] | String;
  Name_not_in?: String[] | String;
  Name_lt?: String;
  Name_lte?: String;
  Name_gt?: String;
  Name_gte?: String;
  Name_contains?: String;
  Name_not_contains?: String;
  Name_starts_with?: String;
  Name_not_starts_with?: String;
  Name_ends_with?: String;
  Name_not_ends_with?: String;
  ThumbURL?: String;
  ThumbURL_not?: String;
  ThumbURL_in?: String[] | String;
  ThumbURL_not_in?: String[] | String;
  ThumbURL_lt?: String;
  ThumbURL_lte?: String;
  ThumbURL_gt?: String;
  ThumbURL_gte?: String;
  ThumbURL_contains?: String;
  ThumbURL_not_contains?: String;
  ThumbURL_starts_with?: String;
  ThumbURL_not_starts_with?: String;
  ThumbURL_ends_with?: String;
  ThumbURL_not_ends_with?: String;
  TotalLike?: Int;
  TotalLike_not?: Int;
  TotalLike_in?: Int[] | Int;
  TotalLike_not_in?: Int[] | Int;
  TotalLike_lt?: Int;
  TotalLike_lte?: Int;
  TotalLike_gt?: Int;
  TotalLike_gte?: Int;
  TotalComments?: Int;
  TotalComments_not?: Int;
  TotalComments_in?: Int[] | Int;
  TotalComments_not_in?: Int[] | Int;
  TotalComments_lt?: Int;
  TotalComments_lte?: Int;
  TotalComments_gt?: Int;
  TotalComments_gte?: Int;
  FeedDesc?: String;
  FeedDesc_not?: String;
  FeedDesc_in?: String[] | String;
  FeedDesc_not_in?: String[] | String;
  FeedDesc_lt?: String;
  FeedDesc_lte?: String;
  FeedDesc_gt?: String;
  FeedDesc_gte?: String;
  FeedDesc_contains?: String;
  FeedDesc_not_contains?: String;
  FeedDesc_starts_with?: String;
  FeedDesc_not_starts_with?: String;
  FeedDesc_ends_with?: String;
  FeedDesc_not_ends_with?: String;
  AllComments_every?: CommentDataWhereInput;
  AllComments_some?: CommentDataWhereInput;
  AllComments_none?: CommentDataWhereInput;
  AllLikes_every?: LikeDataWhereInput;
  AllLikes_some?: LikeDataWhereInput;
  AllLikes_none?: LikeDataWhereInput;
  TimeData?: DateTimeInput;
  TimeData_not?: DateTimeInput;
  TimeData_in?: DateTimeInput[] | DateTimeInput;
  TimeData_not_in?: DateTimeInput[] | DateTimeInput;
  TimeData_lt?: DateTimeInput;
  TimeData_lte?: DateTimeInput;
  TimeData_gt?: DateTimeInput;
  TimeData_gte?: DateTimeInput;
  Location?: String;
  Location_not?: String;
  Location_in?: String[] | String;
  Location_not_in?: String[] | String;
  Location_lt?: String;
  Location_lte?: String;
  Location_gt?: String;
  Location_gte?: String;
  Location_contains?: String;
  Location_not_contains?: String;
  Location_starts_with?: String;
  Location_not_starts_with?: String;
  Location_ends_with?: String;
  Location_not_ends_with?: String;
  PictureForFeed?: String;
  PictureForFeed_not?: String;
  PictureForFeed_in?: String[] | String;
  PictureForFeed_not_in?: String[] | String;
  PictureForFeed_lt?: String;
  PictureForFeed_lte?: String;
  PictureForFeed_gt?: String;
  PictureForFeed_gte?: String;
  PictureForFeed_contains?: String;
  PictureForFeed_not_contains?: String;
  PictureForFeed_starts_with?: String;
  PictureForFeed_not_starts_with?: String;
  PictureForFeed_ends_with?: String;
  PictureForFeed_not_ends_with?: String;
  AND?: CardDataWhereInput[] | CardDataWhereInput;
  OR?: CardDataWhereInput[] | CardDataWhereInput;
  NOT?: CardDataWhereInput[] | CardDataWhereInput;
}

export interface NotificaitonDescriptionCreateOneInput {
  create?: NotificaitonDescriptionCreateInput;
}

export interface CommentDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentDataWhereInput;
  AND?: CommentDataSubscriptionWhereInput[] | CommentDataSubscriptionWhereInput;
  OR?: CommentDataSubscriptionWhereInput[] | CommentDataSubscriptionWhereInput;
  NOT?: CommentDataSubscriptionWhereInput[] | CommentDataSubscriptionWhereInput;
}

export interface PictureDataWhereInput {
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: PictureDataWhereInput[] | PictureDataWhereInput;
  OR?: PictureDataWhereInput[] | PictureDataWhereInput;
  NOT?: PictureDataWhereInput[] | PictureDataWhereInput;
}

export interface CardDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CardDataWhereInput;
  AND?: CardDataSubscriptionWhereInput[] | CardDataSubscriptionWhereInput;
  OR?: CardDataSubscriptionWhereInput[] | CardDataSubscriptionWhereInput;
  NOT?: CardDataSubscriptionWhereInput[] | CardDataSubscriptionWhereInput;
}

export interface CommentDataWhereInput {
  Comment?: String;
  Comment_not?: String;
  Comment_in?: String[] | String;
  Comment_not_in?: String[] | String;
  Comment_lt?: String;
  Comment_lte?: String;
  Comment_gt?: String;
  Comment_gte?: String;
  Comment_contains?: String;
  Comment_not_contains?: String;
  Comment_starts_with?: String;
  Comment_not_starts_with?: String;
  Comment_ends_with?: String;
  Comment_not_ends_with?: String;
  CommentTime?: DateTimeInput;
  CommentTime_not?: DateTimeInput;
  CommentTime_in?: DateTimeInput[] | DateTimeInput;
  CommentTime_not_in?: DateTimeInput[] | DateTimeInput;
  CommentTime_lt?: DateTimeInput;
  CommentTime_lte?: DateTimeInput;
  CommentTime_gt?: DateTimeInput;
  CommentTime_gte?: DateTimeInput;
  ProfileWhichCommented?: String;
  ProfileWhichCommented_not?: String;
  ProfileWhichCommented_in?: String[] | String;
  ProfileWhichCommented_not_in?: String[] | String;
  ProfileWhichCommented_lt?: String;
  ProfileWhichCommented_lte?: String;
  ProfileWhichCommented_gt?: String;
  ProfileWhichCommented_gte?: String;
  ProfileWhichCommented_contains?: String;
  ProfileWhichCommented_not_contains?: String;
  ProfileWhichCommented_starts_with?: String;
  ProfileWhichCommented_not_starts_with?: String;
  ProfileWhichCommented_ends_with?: String;
  ProfileWhichCommented_not_ends_with?: String;
  Replies?: String;
  Replies_not?: String;
  Replies_in?: String[] | String;
  Replies_not_in?: String[] | String;
  Replies_lt?: String;
  Replies_lte?: String;
  Replies_gt?: String;
  Replies_gte?: String;
  Replies_contains?: String;
  Replies_not_contains?: String;
  Replies_starts_with?: String;
  Replies_not_starts_with?: String;
  Replies_ends_with?: String;
  Replies_not_ends_with?: String;
  AND?: CommentDataWhereInput[] | CommentDataWhereInput;
  OR?: CommentDataWhereInput[] | CommentDataWhereInput;
  NOT?: CommentDataWhereInput[] | CommentDataWhereInput;
}

export interface PictureDataUpdateDataInput {
  picture?: String;
}

export interface NotificationDataCreateInput {
  ArrayOfNotificaitons?: NotificaitonDescriptionCreateOneInput;
  NotificaitonCategory: String;
  Picture: String;
  Time: DateTimeInput;
  Date: DateTimeInput;
}

export interface UserUpdateInput {
  name?: String;
  profilePicture?: String;
  Followers?: Int;
  Following?: Int;
  Links?: String;
  Bio?: String;
  PhotosOfTheProfile?: PictureDataUpdateOneInput;
}

export interface NotificaitonDescriptionUpdateInput {
  ProfileName?: String;
  ProfilePicture?: String;
}

export interface UserCreateInput {
  name?: String;
  profilePicture?: String;
  Followers?: Int;
  Following?: Int;
  Links?: String;
  Bio?: String;
  PhotosOfTheProfile?: PictureDataCreateOneInput;
}

export interface NotificaitonDescriptionCreateInput {
  ProfileName: String;
  ProfilePicture: String;
}

export interface StoryDataUpdateInput {
  nameOfTheStoryProvider?: String;
  Story?: StoryDataUpdateStoryInput;
  time?: DateTimeInput;
}

export type StoryDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nameOfTheStoryProvider?: String;
}>;

export interface NotificaitonDescriptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NotificaitonDescriptionWhereInput;
  AND?:
    | NotificaitonDescriptionSubscriptionWhereInput[]
    | NotificaitonDescriptionSubscriptionWhereInput;
  OR?:
    | NotificaitonDescriptionSubscriptionWhereInput[]
    | NotificaitonDescriptionSubscriptionWhereInput;
  NOT?:
    | NotificaitonDescriptionSubscriptionWhereInput[]
    | NotificaitonDescriptionSubscriptionWhereInput;
}

export interface LikeDataUpdateInput {
  ProfileName?: String;
  ProfilePic?: String;
}

export interface StoryDataCreateInput {
  nameOfTheStoryProvider: String;
  Story?: StoryDataCreateStoryInput;
  time: DateTimeInput;
}

export interface StoryDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nameOfTheStoryProvider?: String;
  nameOfTheStoryProvider_not?: String;
  nameOfTheStoryProvider_in?: String[] | String;
  nameOfTheStoryProvider_not_in?: String[] | String;
  nameOfTheStoryProvider_lt?: String;
  nameOfTheStoryProvider_lte?: String;
  nameOfTheStoryProvider_gt?: String;
  nameOfTheStoryProvider_gte?: String;
  nameOfTheStoryProvider_contains?: String;
  nameOfTheStoryProvider_not_contains?: String;
  nameOfTheStoryProvider_starts_with?: String;
  nameOfTheStoryProvider_not_starts_with?: String;
  nameOfTheStoryProvider_ends_with?: String;
  nameOfTheStoryProvider_not_ends_with?: String;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?: StoryDataWhereInput[] | StoryDataWhereInput;
  OR?: StoryDataWhereInput[] | StoryDataWhereInput;
  NOT?: StoryDataWhereInput[] | StoryDataWhereInput;
}

export interface PictureDataCreateInput {
  picture: String;
}

export interface PictureDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PictureDataWhereInput;
  AND?: PictureDataSubscriptionWhereInput[] | PictureDataSubscriptionWhereInput;
  OR?: PictureDataSubscriptionWhereInput[] | PictureDataSubscriptionWhereInput;
  NOT?: PictureDataSubscriptionWhereInput[] | PictureDataSubscriptionWhereInput;
}

export interface NotificaitonDescriptionUpsertNestedInput {
  update: NotificaitonDescriptionUpdateDataInput;
  create: NotificaitonDescriptionCreateInput;
}

export interface CommentDataUpdateInput {
  Comment?: String;
  CommentTime?: DateTimeInput;
  ProfileWhichCommented?: String;
  Replies?: String;
}

export interface NotificationDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NotificationDataWhereInput;
  AND?:
    | NotificationDataSubscriptionWhereInput[]
    | NotificationDataSubscriptionWhereInput;
  OR?:
    | NotificationDataSubscriptionWhereInput[]
    | NotificationDataSubscriptionWhereInput;
  NOT?:
    | NotificationDataSubscriptionWhereInput[]
    | NotificationDataSubscriptionWhereInput;
}

export interface LikeDataUpdateManyInput {
  create?: LikeDataCreateInput[] | LikeDataCreateInput;
}

export interface NotificaitonDescriptionUpdateOneInput {
  create?: NotificaitonDescriptionCreateInput;
  update?: NotificaitonDescriptionUpdateDataInput;
  upsert?: NotificaitonDescriptionUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface CommentDataUpdateManyInput {
  create?: CommentDataCreateInput[] | CommentDataCreateInput;
}

export interface LikeDataWhereInput {
  ProfileName?: String;
  ProfileName_not?: String;
  ProfileName_in?: String[] | String;
  ProfileName_not_in?: String[] | String;
  ProfileName_lt?: String;
  ProfileName_lte?: String;
  ProfileName_gt?: String;
  ProfileName_gte?: String;
  ProfileName_contains?: String;
  ProfileName_not_contains?: String;
  ProfileName_starts_with?: String;
  ProfileName_not_starts_with?: String;
  ProfileName_ends_with?: String;
  ProfileName_not_ends_with?: String;
  ProfilePic?: String;
  ProfilePic_not?: String;
  ProfilePic_in?: String[] | String;
  ProfilePic_not_in?: String[] | String;
  ProfilePic_lt?: String;
  ProfilePic_lte?: String;
  ProfilePic_gt?: String;
  ProfilePic_gte?: String;
  ProfilePic_contains?: String;
  ProfilePic_not_contains?: String;
  ProfilePic_starts_with?: String;
  ProfilePic_not_starts_with?: String;
  ProfilePic_ends_with?: String;
  ProfilePic_not_ends_with?: String;
  AND?: LikeDataWhereInput[] | LikeDataWhereInput;
  OR?: LikeDataWhereInput[] | LikeDataWhereInput;
  NOT?: LikeDataWhereInput[] | LikeDataWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: UUID;
  name?: String;
}>;

export interface PictureDataUpdateOneInput {
  create?: PictureDataCreateInput;
  update?: PictureDataUpdateDataInput;
  upsert?: PictureDataUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PictureDataWhereUniqueInput;
}

export interface CardDataUpdateInput {
  Name?: String;
  ThumbURL?: String;
  TotalLike?: Int;
  TotalComments?: Int;
  FeedDesc?: String;
  AllComments?: CommentDataUpdateManyInput;
  AllLikes?: LikeDataUpdateManyInput;
  TimeData?: DateTimeInput;
  Location?: String;
  PictureForFeed?: String;
}

export interface StoryDataUpdateStoryInput {
  set?: String[] | String;
}

export interface LikeDataCreateInput {
  ProfileName: String;
  ProfilePic: String;
}

export interface StoryDataCreateStoryInput {
  set?: String[] | String;
}

export interface UserWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  profilePicture?: String;
  profilePicture_not?: String;
  profilePicture_in?: String[] | String;
  profilePicture_not_in?: String[] | String;
  profilePicture_lt?: String;
  profilePicture_lte?: String;
  profilePicture_gt?: String;
  profilePicture_gte?: String;
  profilePicture_contains?: String;
  profilePicture_not_contains?: String;
  profilePicture_starts_with?: String;
  profilePicture_not_starts_with?: String;
  profilePicture_ends_with?: String;
  profilePicture_not_ends_with?: String;
  Followers?: Int;
  Followers_not?: Int;
  Followers_in?: Int[] | Int;
  Followers_not_in?: Int[] | Int;
  Followers_lt?: Int;
  Followers_lte?: Int;
  Followers_gt?: Int;
  Followers_gte?: Int;
  Following?: Int;
  Following_not?: Int;
  Following_in?: Int[] | Int;
  Following_not_in?: Int[] | Int;
  Following_lt?: Int;
  Following_lte?: Int;
  Following_gt?: Int;
  Following_gte?: Int;
  Links?: String;
  Links_not?: String;
  Links_in?: String[] | String;
  Links_not_in?: String[] | String;
  Links_lt?: String;
  Links_lte?: String;
  Links_gt?: String;
  Links_gte?: String;
  Links_contains?: String;
  Links_not_contains?: String;
  Links_starts_with?: String;
  Links_not_starts_with?: String;
  Links_ends_with?: String;
  Links_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  PhotosOfTheProfile?: PictureDataWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface StoryDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoryDataWhereInput;
  AND?: StoryDataSubscriptionWhereInput[] | StoryDataSubscriptionWhereInput;
  OR?: StoryDataSubscriptionWhereInput[] | StoryDataSubscriptionWhereInput;
  NOT?: StoryDataSubscriptionWhereInput[] | StoryDataSubscriptionWhereInput;
}

export interface NotificaitonDescriptionUpdateDataInput {
  ProfileName?: String;
  ProfilePicture?: String;
}

export interface PictureDataUpsertNestedInput {
  update: PictureDataUpdateDataInput;
  create: PictureDataCreateInput;
}

export interface CommentDataCreateManyInput {
  create?: CommentDataCreateInput[] | CommentDataCreateInput;
}

export interface CommentDataCreateInput {
  Comment: String;
  CommentTime: DateTimeInput;
  ProfileWhichCommented: String;
  Replies: String;
}

export interface LikeDataCreateManyInput {
  create?: LikeDataCreateInput[] | LikeDataCreateInput;
}

export interface PictureDataCreateOneInput {
  create?: PictureDataCreateInput;
  connect?: PictureDataWhereUniqueInput;
}

export interface LikeDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LikeDataWhereInput;
  AND?: LikeDataSubscriptionWhereInput[] | LikeDataSubscriptionWhereInput;
  OR?: LikeDataSubscriptionWhereInput[] | LikeDataSubscriptionWhereInput;
  NOT?: LikeDataSubscriptionWhereInput[] | LikeDataSubscriptionWhereInput;
}

export interface NotificationDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ArrayOfNotificaitons?: NotificaitonDescriptionWhereInput;
  NotificaitonCategory?: String;
  NotificaitonCategory_not?: String;
  NotificaitonCategory_in?: String[] | String;
  NotificaitonCategory_not_in?: String[] | String;
  NotificaitonCategory_lt?: String;
  NotificaitonCategory_lte?: String;
  NotificaitonCategory_gt?: String;
  NotificaitonCategory_gte?: String;
  NotificaitonCategory_contains?: String;
  NotificaitonCategory_not_contains?: String;
  NotificaitonCategory_starts_with?: String;
  NotificaitonCategory_not_starts_with?: String;
  NotificaitonCategory_ends_with?: String;
  NotificaitonCategory_not_ends_with?: String;
  Picture?: String;
  Picture_not?: String;
  Picture_in?: String[] | String;
  Picture_not_in?: String[] | String;
  Picture_lt?: String;
  Picture_lte?: String;
  Picture_gt?: String;
  Picture_gte?: String;
  Picture_contains?: String;
  Picture_not_contains?: String;
  Picture_starts_with?: String;
  Picture_not_starts_with?: String;
  Picture_ends_with?: String;
  Picture_not_ends_with?: String;
  Time?: DateTimeInput;
  Time_not?: DateTimeInput;
  Time_in?: DateTimeInput[] | DateTimeInput;
  Time_not_in?: DateTimeInput[] | DateTimeInput;
  Time_lt?: DateTimeInput;
  Time_lte?: DateTimeInput;
  Time_gt?: DateTimeInput;
  Time_gte?: DateTimeInput;
  Date?: DateTimeInput;
  Date_not?: DateTimeInput;
  Date_in?: DateTimeInput[] | DateTimeInput;
  Date_not_in?: DateTimeInput[] | DateTimeInput;
  Date_lt?: DateTimeInput;
  Date_lte?: DateTimeInput;
  Date_gt?: DateTimeInput;
  Date_gte?: DateTimeInput;
  AND?: NotificationDataWhereInput[] | NotificationDataWhereInput;
  OR?: NotificationDataWhereInput[] | NotificationDataWhereInput;
  NOT?: NotificationDataWhereInput[] | NotificationDataWhereInput;
}

export interface PictureDataUpdateInput {
  picture?: String;
}

export interface NotificaitonDescriptionWhereInput {
  ProfileName?: String;
  ProfileName_not?: String;
  ProfileName_in?: String[] | String;
  ProfileName_not_in?: String[] | String;
  ProfileName_lt?: String;
  ProfileName_lte?: String;
  ProfileName_gt?: String;
  ProfileName_gte?: String;
  ProfileName_contains?: String;
  ProfileName_not_contains?: String;
  ProfileName_starts_with?: String;
  ProfileName_not_starts_with?: String;
  ProfileName_ends_with?: String;
  ProfileName_not_ends_with?: String;
  ProfilePicture?: String;
  ProfilePicture_not?: String;
  ProfilePicture_in?: String[] | String;
  ProfilePicture_not_in?: String[] | String;
  ProfilePicture_lt?: String;
  ProfilePicture_lte?: String;
  ProfilePicture_gt?: String;
  ProfilePicture_gte?: String;
  ProfilePicture_contains?: String;
  ProfilePicture_not_contains?: String;
  ProfilePicture_starts_with?: String;
  ProfilePicture_not_starts_with?: String;
  ProfilePicture_ends_with?: String;
  ProfilePicture_not_ends_with?: String;
  AND?: NotificaitonDescriptionWhereInput[] | NotificaitonDescriptionWhereInput;
  OR?: NotificaitonDescriptionWhereInput[] | NotificaitonDescriptionWhereInput;
  NOT?: NotificaitonDescriptionWhereInput[] | NotificaitonDescriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentDataConnectionNode {}

export interface CommentDataConnection
  extends Promise<CommentDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CommentDataEdgeNode>>>() => T;
  aggregate: <T = AggregateCommentData>() => T;
}

export interface CommentDataConnectionSubscription
  extends Promise<AsyncIterator<CommentDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<CommentDataEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateCommentDataSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: UUID;
  name?: String;
  profilePicture?: String;
  Followers?: Int;
  Following?: Int;
  Links?: String;
  Bio?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  profilePicture: () => Promise<String>;
  Followers: () => Promise<Int>;
  Following: () => Promise<Int>;
  Links: () => Promise<String>;
  Bio: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  Followers: () => Promise<AsyncIterator<Int>>;
  Following: () => Promise<AsyncIterator<Int>>;
  Links: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateCardDataNode {
  count: Int;
}

export interface AggregateCardData
  extends Promise<AggregateCardDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardDataSubscription
  extends Promise<AsyncIterator<AggregateCardDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CommentDataEdgeNode {
  cursor: String;
}

export interface CommentDataEdge
  extends Promise<CommentDataEdgeNode>,
    Fragmentable {
  node: <T = CommentData>() => T;
  cursor: () => Promise<String>;
}

export interface CommentDataEdgeSubscription
  extends Promise<AsyncIterator<CommentDataEdgeNode>>,
    Fragmentable {
  node: <T = CommentDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PictureDataPreviousValuesNode {
  picture: String;
  id: ID_Output;
}

export interface PictureDataPreviousValues
  extends Promise<PictureDataPreviousValuesNode>,
    Fragmentable {
  picture: () => Promise<String>;
  id: () => Promise<ID_Output>;
}

export interface PictureDataPreviousValuesSubscription
  extends Promise<AsyncIterator<PictureDataPreviousValuesNode>>,
    Fragmentable {
  picture: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CardDataEdgeNode {
  cursor: String;
}

export interface CardDataEdge extends Promise<CardDataEdgeNode>, Fragmentable {
  node: <T = CardData>() => T;
  cursor: () => Promise<String>;
}

export interface CardDataEdgeSubscription
  extends Promise<AsyncIterator<CardDataEdgeNode>>,
    Fragmentable {
  node: <T = CardDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: UUID;
  name?: String;
  profilePicture?: String;
  Followers?: Int;
  Following?: Int;
  Links?: String;
  Bio?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  profilePicture: () => Promise<String>;
  Followers: () => Promise<Int>;
  Following: () => Promise<Int>;
  Links: () => Promise<String>;
  Bio: () => Promise<String>;
  PhotosOfTheProfile: <T = PictureData>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  Followers: () => Promise<AsyncIterator<Int>>;
  Following: () => Promise<AsyncIterator<Int>>;
  Links: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  PhotosOfTheProfile: <T = PictureDataSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateStoryDataNode {
  count: Int;
}

export interface AggregateStoryData
  extends Promise<AggregateStoryDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoryDataSubscription
  extends Promise<AsyncIterator<AggregateStoryDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoryDataConnectionNode {}

export interface StoryDataConnection
  extends Promise<StoryDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<StoryDataEdgeNode>>>() => T;
  aggregate: <T = AggregateStoryData>() => T;
}

export interface StoryDataConnectionSubscription
  extends Promise<AsyncIterator<StoryDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<StoryDataEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateStoryDataSubscription>() => T;
}

export interface CardDataNode {
  id: ID_Output;
  Name: String;
  ThumbURL: String;
  TotalLike?: Int;
  TotalComments?: Int;
  FeedDesc: String;
  TimeData: DateTimeOutput;
  Location: String;
  PictureForFeed: String;
}

export interface CardData extends Promise<CardDataNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  ThumbURL: () => Promise<String>;
  TotalLike: () => Promise<Int>;
  TotalComments: () => Promise<Int>;
  FeedDesc: () => Promise<String>;
  AllComments: <T = Promise<Array<CommentDataNode>>>(
    args?: {
      where?: CommentDataWhereInput;
      orderBy?: CommentDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  AllLikes: <T = Promise<Array<LikeDataNode>>>(
    args?: {
      where?: LikeDataWhereInput;
      orderBy?: LikeDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  TimeData: () => Promise<DateTimeOutput>;
  Location: () => Promise<String>;
  PictureForFeed: () => Promise<String>;
}

export interface CardDataSubscription
  extends Promise<AsyncIterator<CardDataNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  ThumbURL: () => Promise<AsyncIterator<String>>;
  TotalLike: () => Promise<AsyncIterator<Int>>;
  TotalComments: () => Promise<AsyncIterator<Int>>;
  FeedDesc: () => Promise<AsyncIterator<String>>;
  AllComments: <T = Promise<AsyncIterator<Array<CommentDataSubscription>>>>(
    args?: {
      where?: CommentDataWhereInput;
      orderBy?: CommentDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  AllLikes: <T = Promise<AsyncIterator<Array<LikeDataSubscription>>>>(
    args?: {
      where?: LikeDataWhereInput;
      orderBy?: LikeDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  TimeData: () => Promise<AsyncIterator<DateTimeOutput>>;
  Location: () => Promise<AsyncIterator<String>>;
  PictureForFeed: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePictureDataNode {
  count: Int;
}

export interface AggregatePictureData
  extends Promise<AggregatePictureDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePictureDataSubscription
  extends Promise<AsyncIterator<AggregatePictureDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PictureDataConnectionNode {}

export interface PictureDataConnection
  extends Promise<PictureDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PictureDataEdgeNode>>>() => T;
  aggregate: <T = AggregatePictureData>() => T;
}

export interface PictureDataConnectionSubscription
  extends Promise<AsyncIterator<PictureDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<PictureDataEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregatePictureDataSubscription>() => T;
}

export interface CardDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CardDataSubscriptionPayload
  extends Promise<CardDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardDataPreviousValues>() => T;
}

export interface CardDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardDataPreviousValuesSubscription>() => T;
}

export interface AggregateNotificationDataNode {
  count: Int;
}

export interface AggregateNotificationData
  extends Promise<AggregateNotificationDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationDataSubscription
  extends Promise<AsyncIterator<AggregateNotificationDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardDataPreviousValuesNode {
  id: ID_Output;
  Name: String;
  ThumbURL: String;
  TotalLike?: Int;
  TotalComments?: Int;
  FeedDesc: String;
  TimeData: DateTimeOutput;
  Location: String;
  PictureForFeed: String;
}

export interface CardDataPreviousValues
  extends Promise<CardDataPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  ThumbURL: () => Promise<String>;
  TotalLike: () => Promise<Int>;
  TotalComments: () => Promise<Int>;
  FeedDesc: () => Promise<String>;
  TimeData: () => Promise<DateTimeOutput>;
  Location: () => Promise<String>;
  PictureForFeed: () => Promise<String>;
}

export interface CardDataPreviousValuesSubscription
  extends Promise<AsyncIterator<CardDataPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  ThumbURL: () => Promise<AsyncIterator<String>>;
  TotalLike: () => Promise<AsyncIterator<Int>>;
  TotalComments: () => Promise<AsyncIterator<Int>>;
  FeedDesc: () => Promise<AsyncIterator<String>>;
  TimeData: () => Promise<AsyncIterator<DateTimeOutput>>;
  Location: () => Promise<AsyncIterator<String>>;
  PictureForFeed: () => Promise<AsyncIterator<String>>;
}

export interface NotificationDataConnectionNode {}

export interface NotificationDataConnection
  extends Promise<NotificationDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<NotificationDataEdgeNode>>>() => T;
  aggregate: <T = AggregateNotificationData>() => T;
}

export interface NotificationDataConnectionSubscription
  extends Promise<AsyncIterator<NotificationDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<NotificationDataEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateNotificationDataSubscription>() => T;
}

export interface CardDataConnectionNode {}

export interface CardDataConnection
  extends Promise<CardDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CardDataEdgeNode>>>() => T;
  aggregate: <T = AggregateCardData>() => T;
}

export interface CardDataConnectionSubscription
  extends Promise<AsyncIterator<CardDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CardDataEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCardDataSubscription>() => T;
}

export interface AggregateNotificaitonDescriptionNode {
  count: Int;
}

export interface AggregateNotificaitonDescription
  extends Promise<AggregateNotificaitonDescriptionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificaitonDescriptionSubscription
  extends Promise<AsyncIterator<AggregateNotificaitonDescriptionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CommentDataSubscriptionPayload
  extends Promise<CommentDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentDataPreviousValues>() => T;
}

export interface CommentDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentDataPreviousValuesSubscription>() => T;
}

export interface NotificaitonDescriptionConnectionNode {}

export interface NotificaitonDescriptionConnection
  extends Promise<NotificaitonDescriptionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<NotificaitonDescriptionEdgeNode>>>() => T;
  aggregate: <T = AggregateNotificaitonDescription>() => T;
}

export interface NotificaitonDescriptionConnectionSubscription
  extends Promise<AsyncIterator<NotificaitonDescriptionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<NotificaitonDescriptionEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateNotificaitonDescriptionSubscription>() => T;
}

export interface CommentDataPreviousValuesNode {
  Comment: String;
  CommentTime: DateTimeOutput;
  ProfileWhichCommented: String;
  Replies: String;
}

export interface CommentDataPreviousValues
  extends Promise<CommentDataPreviousValuesNode>,
    Fragmentable {
  Comment: () => Promise<String>;
  CommentTime: () => Promise<DateTimeOutput>;
  ProfileWhichCommented: () => Promise<String>;
  Replies: () => Promise<String>;
}

export interface CommentDataPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentDataPreviousValuesNode>>,
    Fragmentable {
  Comment: () => Promise<AsyncIterator<String>>;
  CommentTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ProfileWhichCommented: () => Promise<AsyncIterator<String>>;
  Replies: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLikeDataNode {
  count: Int;
}

export interface AggregateLikeData
  extends Promise<AggregateLikeDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeDataSubscription
  extends Promise<AsyncIterator<AggregateLikeDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeDataNode {
  ProfileName: String;
  ProfilePic: String;
}

export interface LikeData extends Promise<LikeDataNode>, Fragmentable {
  ProfileName: () => Promise<String>;
  ProfilePic: () => Promise<String>;
}

export interface LikeDataSubscription
  extends Promise<AsyncIterator<LikeDataNode>>,
    Fragmentable {
  ProfileName: () => Promise<AsyncIterator<String>>;
  ProfilePic: () => Promise<AsyncIterator<String>>;
}

export interface LikeDataConnectionNode {}

export interface LikeDataConnection
  extends Promise<LikeDataConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LikeDataEdgeNode>>>() => T;
  aggregate: <T = AggregateLikeData>() => T;
}

export interface LikeDataConnectionSubscription
  extends Promise<AsyncIterator<LikeDataConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LikeDataEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLikeDataSubscription>() => T;
}

export interface LikeDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LikeDataSubscriptionPayload
  extends Promise<LikeDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikeData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikeDataPreviousValues>() => T;
}

export interface LikeDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikeDataPreviousValuesSubscription>() => T;
}

export interface StoryDataEdgeNode {
  cursor: String;
}

export interface StoryDataEdge
  extends Promise<StoryDataEdgeNode>,
    Fragmentable {
  node: <T = StoryData>() => T;
  cursor: () => Promise<String>;
}

export interface StoryDataEdgeSubscription
  extends Promise<AsyncIterator<StoryDataEdgeNode>>,
    Fragmentable {
  node: <T = StoryDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LikeDataPreviousValuesNode {
  ProfileName: String;
  ProfilePic: String;
}

export interface LikeDataPreviousValues
  extends Promise<LikeDataPreviousValuesNode>,
    Fragmentable {
  ProfileName: () => Promise<String>;
  ProfilePic: () => Promise<String>;
}

export interface LikeDataPreviousValuesSubscription
  extends Promise<AsyncIterator<LikeDataPreviousValuesNode>>,
    Fragmentable {
  ProfileName: () => Promise<AsyncIterator<String>>;
  ProfilePic: () => Promise<AsyncIterator<String>>;
}

export interface StoryDataNode {
  id: ID_Output;
  nameOfTheStoryProvider: String;
  Story: String[];
  time: DateTimeOutput;
}

export interface StoryData extends Promise<StoryDataNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nameOfTheStoryProvider: () => Promise<String>;
  Story: () => Promise<String[]>;
  time: () => Promise<DateTimeOutput>;
}

export interface StoryDataSubscription
  extends Promise<AsyncIterator<StoryDataNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nameOfTheStoryProvider: () => Promise<AsyncIterator<String>>;
  Story: () => Promise<AsyncIterator<String[]>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentDataNode {
  Comment: String;
  CommentTime: DateTimeOutput;
  ProfileWhichCommented: String;
  Replies: String;
}

export interface CommentData extends Promise<CommentDataNode>, Fragmentable {
  Comment: () => Promise<String>;
  CommentTime: () => Promise<DateTimeOutput>;
  ProfileWhichCommented: () => Promise<String>;
  Replies: () => Promise<String>;
}

export interface CommentDataSubscription
  extends Promise<AsyncIterator<CommentDataNode>>,
    Fragmentable {
  Comment: () => Promise<AsyncIterator<String>>;
  CommentTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ProfileWhichCommented: () => Promise<AsyncIterator<String>>;
  Replies: () => Promise<AsyncIterator<String>>;
}

export interface PictureDataNode {
  picture: String;
  id: ID_Output;
}

export interface PictureData extends Promise<PictureDataNode>, Fragmentable {
  picture: () => Promise<String>;
  id: () => Promise<ID_Output>;
}

export interface PictureDataSubscription
  extends Promise<AsyncIterator<PictureDataNode>>,
    Fragmentable {
  picture: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface NotificaitonDescriptionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NotificaitonDescriptionSubscriptionPayload
  extends Promise<NotificaitonDescriptionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificaitonDescription>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificaitonDescriptionPreviousValues>() => T;
}

export interface NotificaitonDescriptionSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<NotificaitonDescriptionSubscriptionPayloadNode>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificaitonDescriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = NotificaitonDescriptionPreviousValuesSubscription
  >() => T;
}

export interface NotificationDataNode {
  id: ID_Output;
  NotificaitonCategory: String;
  Picture: String;
  Time: DateTimeOutput;
  Date: DateTimeOutput;
}

export interface NotificationData
  extends Promise<NotificationDataNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ArrayOfNotificaitons: <T = NotificaitonDescription>() => T;
  NotificaitonCategory: () => Promise<String>;
  Picture: () => Promise<String>;
  Time: () => Promise<DateTimeOutput>;
  Date: () => Promise<DateTimeOutput>;
}

export interface NotificationDataSubscription
  extends Promise<AsyncIterator<NotificationDataNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ArrayOfNotificaitons: <T = NotificaitonDescriptionSubscription>() => T;
  NotificaitonCategory: () => Promise<AsyncIterator<String>>;
  Picture: () => Promise<AsyncIterator<String>>;
  Time: () => Promise<AsyncIterator<DateTimeOutput>>;
  Date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificaitonDescriptionPreviousValuesNode {
  ProfileName: String;
  ProfilePicture: String;
}

export interface NotificaitonDescriptionPreviousValues
  extends Promise<NotificaitonDescriptionPreviousValuesNode>,
    Fragmentable {
  ProfileName: () => Promise<String>;
  ProfilePicture: () => Promise<String>;
}

export interface NotificaitonDescriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificaitonDescriptionPreviousValuesNode>>,
    Fragmentable {
  ProfileName: () => Promise<AsyncIterator<String>>;
  ProfilePicture: () => Promise<AsyncIterator<String>>;
}

export interface NotificaitonDescriptionNode {
  ProfileName: String;
  ProfilePicture: String;
}

export interface NotificaitonDescription
  extends Promise<NotificaitonDescriptionNode>,
    Fragmentable {
  ProfileName: () => Promise<String>;
  ProfilePicture: () => Promise<String>;
}

export interface NotificaitonDescriptionSubscription
  extends Promise<AsyncIterator<NotificaitonDescriptionNode>>,
    Fragmentable {
  ProfileName: () => Promise<AsyncIterator<String>>;
  ProfilePicture: () => Promise<AsyncIterator<String>>;
}

export interface StoryDataPreviousValuesNode {
  id: ID_Output;
  nameOfTheStoryProvider: String;
  Story: String[];
  time: DateTimeOutput;
}

export interface StoryDataPreviousValues
  extends Promise<StoryDataPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nameOfTheStoryProvider: () => Promise<String>;
  Story: () => Promise<String[]>;
  time: () => Promise<DateTimeOutput>;
}

export interface StoryDataPreviousValuesSubscription
  extends Promise<AsyncIterator<StoryDataPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nameOfTheStoryProvider: () => Promise<AsyncIterator<String>>;
  Story: () => Promise<AsyncIterator<String[]>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateCommentDataNode {
  count: Int;
}

export interface AggregateCommentData
  extends Promise<AggregateCommentDataNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentDataSubscription
  extends Promise<AsyncIterator<AggregateCommentDataNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PictureDataEdgeNode {
  cursor: String;
}

export interface PictureDataEdge
  extends Promise<PictureDataEdgeNode>,
    Fragmentable {
  node: <T = PictureData>() => T;
  cursor: () => Promise<String>;
}

export interface PictureDataEdgeSubscription
  extends Promise<AsyncIterator<PictureDataEdgeNode>>,
    Fragmentable {
  node: <T = PictureDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PictureDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PictureDataSubscriptionPayload
  extends Promise<PictureDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PictureData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PictureDataPreviousValues>() => T;
}

export interface PictureDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PictureDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PictureDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PictureDataPreviousValuesSubscription>() => T;
}

export interface StoryDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StoryDataSubscriptionPayload
  extends Promise<StoryDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoryData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoryDataPreviousValues>() => T;
}

export interface StoryDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoryDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoryDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoryDataPreviousValuesSubscription>() => T;
}

export interface NotificationDataPreviousValuesNode {
  id: ID_Output;
  NotificaitonCategory: String;
  Picture: String;
  Time: DateTimeOutput;
  Date: DateTimeOutput;
}

export interface NotificationDataPreviousValues
  extends Promise<NotificationDataPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  NotificaitonCategory: () => Promise<String>;
  Picture: () => Promise<String>;
  Time: () => Promise<DateTimeOutput>;
  Date: () => Promise<DateTimeOutput>;
}

export interface NotificationDataPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationDataPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  NotificaitonCategory: () => Promise<AsyncIterator<String>>;
  Picture: () => Promise<AsyncIterator<String>>;
  Time: () => Promise<AsyncIterator<DateTimeOutput>>;
  Date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationDataSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NotificationDataSubscriptionPayload
  extends Promise<NotificationDataSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationData>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationDataPreviousValues>() => T;
}

export interface NotificationDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationDataSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationDataPreviousValuesSubscription>() => T;
}

export interface NotificationDataEdgeNode {
  cursor: String;
}

export interface NotificationDataEdge
  extends Promise<NotificationDataEdgeNode>,
    Fragmentable {
  node: <T = NotificationData>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationDataEdgeSubscription
  extends Promise<AsyncIterator<NotificationDataEdgeNode>>,
    Fragmentable {
  node: <T = NotificationDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LikeDataEdgeNode {
  cursor: String;
}

export interface LikeDataEdge extends Promise<LikeDataEdgeNode>, Fragmentable {
  node: <T = LikeData>() => T;
  cursor: () => Promise<String>;
}

export interface LikeDataEdgeSubscription
  extends Promise<AsyncIterator<LikeDataEdgeNode>>,
    Fragmentable {
  node: <T = LikeDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NotificaitonDescriptionEdgeNode {
  cursor: String;
}

export interface NotificaitonDescriptionEdge
  extends Promise<NotificaitonDescriptionEdgeNode>,
    Fragmentable {
  node: <T = NotificaitonDescription>() => T;
  cursor: () => Promise<String>;
}

export interface NotificaitonDescriptionEdgeSubscription
  extends Promise<AsyncIterator<NotificaitonDescriptionEdgeNode>>,
    Fragmentable {
  node: <T = NotificaitonDescriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type UUID = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "https://eu1.prisma.sh/rutusatpathy44/Schema/dev"
});
export const prisma = new Prisma();
